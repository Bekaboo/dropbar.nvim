*dropbar.txt*                             IDE-like breadcrumbs, out of the box
*dropbar.nvim.txt*
*dropbar*
*dropbar.nvim*

                         dropbar.nvim    by Bekaboo


==============================================================================
CONTENTS                                           *dropbar-table-of-contents*

1. Features                                                 |dropbar-features|
2. Requirements                                         |dropbar-requirements|
3. Installation                                         |dropbar-installation|
4. Usage                                                       |dropbar-usage|
5. Configuration                                       |dropbar-configuration|
  5.1 Options                                  |dropbar-configuration-options|
    5.1.1 General                      |dropbar-configuration-options-general|
    5.1.2 Icons                          |dropbar-configuration-options-icons|
    5.1.3 Bar                              |dropbar-configuration-options-bar|
    5.1.4 Menu                            |dropbar-configuration-options-menu|
    5.1.5 Sources                      |dropbar-configuration-options-sources|
      5.1.5.1 Path                |dropbar-configuration-options-sources-path|
      5.1.5.2 Treesitter    |dropbar-configuration-options-sources-treesitter|
      5.1.5.3 LSP                  |dropbar-configuration-options-sources-lsp|
      5.1.5.4 Markdown        |dropbar-configuration-options-sources-markdown|
  5.2 API                                          |dropbar-configuration-api|
  5.3 Highlighting                        |dropbar-configuration-highlighting|
6. Developers                                             |dropbar-developers|
  6.1 Architecture                           |dropbar-developers-architecture|
  6.2 Classes                                     |dropbar-developers-classes|
    6.2.1 `dropbar_t`                   |dropbar-developers-classes-dropbar_t|
    6.2.2 `dropbar_symbol_t`     |dropbar-developers-classes-dropbar_symbol_t|
    6.2.4 `dropbar_menu_t`         |dropbar-developers-classes-dropbar_menu_t|
    6.2.5 `dropbar_menu_entry_t` |dropbar-developers-classes-dropbar_menu_entry_t|
    6.2.6 `dropbar_menu_hl_info_t` |dropbar-developers-classes-dropbar_menu_hl_info_t|
    6.2.7 `dropbar_source_t`     |dropbar-developers-classes-dropbar_source_t|
  6.3 Making a new source             |dropbar-developers-making-a-new-source|
    6.3.1 Making a source with drop-down menus |dropbar-developers-making-a-source-with-drop-down-menus|
    6.3.2 Default `on_click()` callback |dropbar-developers-default-on_click-callback|
    6.3.3 Lazy-loading expensive fields |dropbar-developers-lazy-loading-expensive-fields|
7. Similar Projects                                 |dropbar-similar-projects|


==============================================================================
FEATURES                                                    *dropbar-features*

`dropbar.nvim` is a Neovim plugin that provides a polished, IDE-like,
highly-customizable 'winbar' with drop-down menu support and mutiple backends.

- Opening drop-down menus or go to definition with a single mouse click
- Pick mode for quickly selecting a component in the winbar with shortcuts
- Automatically truncating long components
- Multiple backends that support fall-backs
    `dropbar.nvim` comes with four builtin sources:

    lsp: gets symbols from language servers using nvim’s builtin LSP framework
    markdown: a incremental parser that gets markdown headings
    path: gets current file path
    treesitter: gets symbols from treesitter parsers attached to current buf

    To make a new custom source, see |dropbar-developers-making-a-new-source|.
    For source fall-backs support, see |dropbar-configuration-options-bar|.
- Zero config & Zero dependency
    `dropbar.nvim` does not require nvim-lspconfig , nvim-treesitter or any
    third-party UI libraries to work. As long as the language server or the
    treesitter parser is installed, it should work just fine.

TODO

- Show highlights in the drop-down menu according to current mouse/cursor
    position, see 'mousemev' and `<MouseMove>`
- Preview symbol ranges in original window when hovering over them in the
    drop-down menu

==============================================================================
REQUIREMENTS                                            *dropbar-requirements*

- Neovim nightly (>= 0.10.0-dev)
- Optional
    - nvim-web-devicons <https://github.com/nvim-tree/nvim-web-devicons>, if
      you want to see icons for different filetypes
    - Working language server installation for the lsp source to work
    - Working treesitter parser installation for the treesitter source to work


==============================================================================
INSTALLATION                                            *dropbar-installation*

- Using lazy.nvim <https://github.com/folke/lazy.nvim> >lua

        require('lazy').setup({
          { 'Bekaboo/dropbar.nvim' }
        })
<

- Using packer.nvim <https://github.com/wbthomason/packer.nvim> >lua

        require('packer').startup(function(use)
          use('Bekaboo/dropbar.nvim')
        end)
<

- Using native package manager >bash

        mkdir -p ~/.local/share/nvim/site/pack/packages/
        git clone https://github.com/Bekaboo/dropbar.nvim \
	  ~/.local/share/nvim/site/pack/packages/start/dropbar.nvim
<


==============================================================================
USAGE                                                          *dropbar-usage*

- Basics
    - Moves the cursor around and see the winbar reflects your current context

- Mouse support
    - Click on a component in the winbar to open a drop-down menu of its
      siblings
    - Click on an entry in the drop-down menu to go to its location
    - Click on the indicator in the drop-down menu to open a sub-menu of its
      children

- Pick mode
    - Use `require('dropbar.api').pick()` to enter interactive pick mode or
      `require('dropbar.api').pick(<idx>)` to directly select a component at
      `idx`.
    - Inside interactive pick mode, press the corresponding pivot shown before
      each component to select it

- Default keymaps in drop-down menu
    - `<LeftMouse>`: call the `on_click` callback of the symbol at the mouse
      click
    - `<CR>`: find the first clickable symbol in the current drop-down menu
      entry and call its `on_click` callback
    - To disable, remap or add new keymaps in the drop-down menu, see
      |dropbar-configuration-options|


==============================================================================
CONFIGURATION                                          *dropbar-configuration*

------------------------------------------------------------------------------
OPTIONS                                        *dropbar-configuration-options*

..............................................................................
GENERAL                                *dropbar-configuration-options-general*

These options live under `opts.general` and are used to configure the general
behavior of the plugin:

- `opts.general.enable`: `boolean|fun(buf: integer, win: integer): boolean`
    - Controls whether to enable the plugin for the current buffer and window
    - If a function is provided, it will be called with the current bufnr and
      winid and should return a boolean
    - Default: >lua

            function(buf, win)
              return not vim.api.nvim_win_get_config(win).zindex
              and vim.bo[buf].buftype == ''
              and vim.api.nvim_buf_get_name(buf) ~= ''
              and not vim.wo[win].diff
            end
<
- `opts.general.update_events.win`: `string[]`
    - List of events that should trigger an update on the dropbar attached to
      a single window
    - Default: >lua

            {
	      'CursorMoved',
	      'CursorMovedI',
	      'WinEnter',
	      'WinLeave',
	      'WinResized',
	      'WinScrolled',
            }
<
- `opts.general.update_events.buf`: `string[]`
  - List of events that should trigger an update on all dropbars attached to a
    buffer
  - Default: >lua

	    {
	      'BufModifiedSet',
	      'FileChangedShellPost',
	      'TextChanged',
	      'TextChangedI',
	    }
<
- `opts.general.update_events.global`: `string[]`
  - List of events that should trigger an update of all dropbars in current
    nvim session
  - Default: >lua

	    {
	      'DirChanged',
	      'VimResized',
	    }
<

..............................................................................
ICONS                                    *dropbar-configuration-options-icons*

These options live under `opts.icons` and are used to configure the icons used
by the plugin:

- `opts.icons.kinds.use_devicons`: `boolean`
    - Whether to use nvim-web-devicons
      <https://github.com/nvim-tree/nvim-web-devicons> to show icons for
      different filetypes
    - Default: `true`

- `opts.icons.kinds.symbols`: `table<string, string>`
    - Table mapping the different kinds of symbols to their corresponding
      icons
    - Default: >lua

            {
              Array = '󰅪 ',
              Boolean = ' ',
              BreakStatement = '󰙧 ',
              Call = '󰃷 ',
              CaseStatement = '󱃙 ',
              Class = ' ',
              Color = '󰏘 ',
              Constant = '󰏿 ',
              Constructor = ' ',
              ContinueStatement = '→ ',
              Copilot = ' ',
              Declaration = '󰙠 ',
              Delete = '󰩺 ',
              DoStatement = '󰑖 ',
              Enum = ' ',
              EnumMember = ' ',
              Event = ' ',
              Field = ' ',
              File = '󰈔 ',
              Folder = '󰉋 ',
              ForStatement = '󰑖 ',
              Function = '󰊕 ',
              Identifier = '󰀫 ',
              IfStatement = '󰇉 ',
              Interface = ' ',
              Keyword = '󰌋 ',
              List = '󰅪 ',
              Log = '󰦪 ',
              Lsp = ' ',
              Macro = '󰁌 ',
              MarkdownH1 = '󰉫 ',
              MarkdownH2 = '󰉬 ',
              MarkdownH3 = '󰉭 ',
              MarkdownH4 = '󰉮 ',
              MarkdownH5 = '󰉯 ',
              MarkdownH6 = '󰉰 ',
              Method = '󰆧 ',
              Module = '󰏗 ',
              Namespace = '󰅩 ',
              Null = '󰢤 ',
              Number = '󰎠 ',
              Object = '󰅩 ',
              Operator = '󰆕 ',
              Package = '󰆦 ',
              Property = ' ',
              Reference = '󰦾 ',
              Regex = ' ',
              Repeat = '󰑖 ',
              Scope = '󰅩 ',
              Snippet = '󰩫 ',
              Specifier = '󰦪 ',
              Statement = '󰅩 ',
              String = '󰉾 ',
              Struct = ' ',
              SwitchStatement = '󰺟 ',
              Terminal = ' ',
              Text = ' ',
              Type = ' ',
              TypeParameter = '󰆩 ',
              Unit = ' ',
              Value = '󰎠 ',
              Variable = '󰀫 ',
              WhileStatement = '󰑖 ',
            }
<
- `opts.icons.ui.bar`: `table<string, string>`
    - Controls the icons used in the winbar UI
    - Default: >lua
            {
              separator = ' ',
              extends = '…',
            }
<
- `opts.icons.ui.menu`: `table<string, string>`
    - Controls the icons used in the menu UI
    - Default: >lua
            {
              separator = ' ',
              indicator = ' ',
            }
<

..............................................................................
BAR                                        *dropbar-configuration-options-bar*

These options live under `opts.bar` and are used to control the behavior of
the winbar:

- `opts.bar.sources`:
  `dropbar_source_t[]|fun(buf: integer, win: integer): dropbar_source_t[]`
    - List of sources to show in the winbar
    - If a function is provided, it will be called with the current bufnr and
      winid and should return a list of sources
    - Default: >lua

            function(_, _)
              local sources = require('dropbar.sources')
              return {
                sources.path,
                {
                  get_symbols = function(buf, cursor)
                    if vim.bo[buf].ft == 'markdown' then
                      return sources.markdown.get_symbols(buf, cursor)
                    end
                    for _, source in ipairs({
                      sources.lsp,
                      sources.treesitter,
                    }) do
                      local symbols = source.get_symbols(buf, cursor)
                      if not vim.tbl_isempty(symbols) then
                        return symbols
                      end
                    end
                    return {}
                  end,
                },
              }
            end
<
    - Notice that in the default config we register the second source as an
      aggregation of LSP, treesitter, and markdown sources, so that we
      dynamically choose the best source for the current buffer or window. For
      more information about sources, see
      |dropbar-developers-classes-dropbar_source_t|.

- `opts.bar.padding`: `{ left: number, right: number }`
    - Padding to use between the winbar and the window border
    - Default: `{ left = 1, right = 1 }`

- `opts.bar.pick.pivots`: `string`
    - Pivots to use in pick mode
    - Default: `'abcdefghijklmnopqrstuvwxyz'`

- `opts.bar.truncate`: `boolean`
    - Whether to truncate the winbar if it doesn’t fit in the window
    - Default: `true`

..............................................................................
MENU                                      *dropbar-configuration-options-menu*

These options live under `opts.menu` and are used to control the behavior of
the menu:

- `opts.menu.entry.padding`: `{ left: number, right: number }`
    - Padding to use between the menu entry and the menu border
    - Default: `{ left = 1, right = 1 }`
- `opts.menu.keymaps`:
  `table<string, function|string|table<string, function>|table<string, string>>`
    - Buffer-local keymaps in the menu
    - Use `<key> = <function|string>` to map a key in normal mode and visual
      mode in the menu buffer, or use `<key> = table<mode, function|string>`
      to map a key in specific modes.
    - Default: >lua
            {
              ['<LeftMouse>'] = function()
                local api = require('dropbar.api')
                local menu = api.get_current_dropbar_menu()
                if not menu then
                  return
                end
                local mouse = vim.fn.getmousepos()
                if mouse.winid ~= menu.win then
                  local parent_menu = api.get_dropbar_menu(mouse.winid)
                  if parent_menu and parent_menu.sub_menu then
                    parent_menu.sub_menu:close()
                  end
                  if vim.api.nvim_win_is_valid(mouse.winid) then
                    vim.api.nvim_set_current_win(mouse.winid)
                  end
                  return
                end
                menu:click_at({ mouse.line, mouse.column }, nil, 1, 'l')
              end,
              ['<CR>'] = function()
                local menu = require('dropbar.api').get_current_dropbar_menu()
                if not menu then
                  return
                end
                local cursor = vim.api.nvim_win_get_cursor(menu.win)
                local component = menu.entries[cursor[1]]:first_clickable(cursor[2])
                if component then
                  menu:click_on(component, nil, 1, 'l')
                end
              end,
            }
<
- `opts.menu.win_configs`: `table<string, dropbar_menu_win_config_opts_t>`
    - Window configurations for the menu, see `:h nvim_open_win()`
    - Each config key in `opts.menu.win_configs` accepts either a plain value
      which will be passes directly to `nvim_open_win()`, or a function that
      takes the current menu (see |dropbar-developers-classes-dropbar_menu_t|)
      as an argument and returns a value to be passed to `nvim_open_win()`.
    - Default: >lua
            {
              border = 'none',
              style = 'minimal',
              row = function(menu)
                return menu.parent_menu
                    and menu.parent_menu.clicked_at
                    and menu.parent_menu.clicked_at[1] - vim.fn.line('w')
                  or 1
              end,
              col = function(menu)
                return menu.parent_menu and menu.parent_menu._win_configs.width or 0
              end,
              relative = function(menu)
                return menu.parent_menu and 'win' or 'mouse'
              end,
              win = function(menu)
                return menu.parent_menu and menu.parent_menu.win
              end,
              height = function(menu)
                return math.max(
                  1,
                  math.min(
                    #menu.entries,
                    vim.go.pumheight ~= 0 and vim.go.pumheight
                      or math.ceil(vim.go.lines / 4)
                  )
                )
              end,
              width = function(menu)
                local min_width = vim.go.pumwidth ~= 0 and vim.go.pumwidth or 8
                if vim.tbl_isempty(menu.entries) then
                  return min_width
                end
                return math.max(
                  min_width,
                  math.max(unpack(vim.tbl_map(function(entry)
                    return entry:displaywidth()
                  end, menu.entries)))
                )
              end,
            }
<

..............................................................................
SOURCES                                *dropbar-configuration-options-sources*

These options live under `opts.sources` and are used to control the behavior
of each sources.

PATH                              *dropbar-configuration-options-sources-path*

- `opts.sources.path.relative_to`: `string|fun(buf: integer): string`
    - The path to use as the root of the relative path
    - If a function is provided, it will be called with the current buffer
      number as an argument and should return a string to use as the root of
      the relative path
    - Notice: currently does not support `..` relative paths
    - Default: >lua
            function(_)
              return vim.fn.getcwd()
            end
<
- `opts.sources.path.filter`: `function(name: string): boolean`
    - A function that takes a file name and returns whether to include it in
      the results shown in the drop-down menu
    - Default: >lua
            function(_)
              return true
            end
<
- `opts.sources.path.modified`: `function(sym: dropbar_symbol_t): dropbar_symbol_t`
  - A function that takes the last symbol in the result got from the path
    source and returns an alternative symbol to show if the current buffer is
    modified, for information about dropbar symbols see
    |dropbar-developers-classes-dropbar_symbol_t|
  - Default: >lua

	    function(sym)
	      return sym
	    end
<
  - To set a different icon, name, or highlights when the buffer is modified,
    you can change the corresponding fields in the returned symbol: >lua

	    function(sym)
	      return sym:merge({
		name = sym.name .. ' [+]',
		icon = ' ',
		name_hl = 'DiffAdded',
		icon_hl = 'DiffAdded',
		-- ...
	      })
	    end

TREESITTER                  *dropbar-configuration-options-sources-treesitter*

- `opts.sources.treesitter.name_pattern`: `string`
    - Lua pattern used to extract a short name from the node text
    - Be aware! The matching result must not be nil
    - Default: `string.rep('[#~%w%._%->!]*', 4, '%s*')`
- `opts.sources.treesitter.valid_types:` `string[]`
    - A list of treesitter node types to include in the results
    - Default: >lua
            {
              'array',
              'boolean',
              'break_statement',
              'call',
              'case_statement',
              'class',
              'constant',
              'constructor',
              'continue_statement',
              'delete',
              'do_statement',
              'enum',
              'enum_member',
              'event',
              'for_statement',
              'function',
              'if_statement',
              'interface',
              'keyword',
              'list',
              'macro',
              'method',
              'module',
              'namespace',
              'null',
              'number',
              'operator',
              'package',
              'property',
              'reference',
              'repeat',
              'scope',
              'specifier',
              'string',
              'struct',
              'switch_statement',
              'type',
              'type_parameter',
              'unit',
              'value',
              'variable',
              'while_statement',
              'declaration',
              'field',
              'identifier',
              'object',
              'statement',
              'text',
            }
<

LSP                                *dropbar-configuration-options-sources-lsp*

- `opts.sources.lsp.request.ttl_init`: `number`
    - Number of times to retry a request before giving up
    - Default: `60`
- `opts.sources.lsp.request.interval`: `number`
    - Number of milliseconds to wait between retries
    - Default: `1000`

MARKDOWN                      *dropbar-configuration-options-sources-markdown*

- `opts.sources.markdown.parse.look_ahead`: `number`
    - Number of lines to update when cursor moves out of the parsed range
    - Default: `200`

------------------------------------------------------------------------------
API                                                *dropbar-configuration-api*

`dropbar.nvim` exposes a few functions in `lua/dropbar/api.lua` that can be
used to interact with the winbar or the drop-down menu:

api.get_dropbar({buf}, {win})                      *dropbar-api-get_dropbar()*

    Get the dropbar associated with the given buffer and window

    For more information about the `dropbar_t` type, see
    |dropbar-developers-classes-dropbar_t|

    Parameters: ~
        • {buf} (integer): The buffer number
        • {win} (integer): The window number

    Returns: ~
	(`dropbar_t`?): The dropbar associated with the given buffer and
			window

api.get_current_dropbar()                  *dropbar-api-get_current_dropbar()*

	Get the dropbar associated with the current buffer and window

	Returns: ~
	    (`dropbar_t`?): The dropbar associated with the current buffer and
			    window

api.get_dropbar_menu({win})                   *dropbar-api-get_dropbar_menu()*

	Get the drop-down menu associated with the given window

	For more information about the `dropbar_menu_t` type, see
	|dropbar-developers-classes-dropbar_menu_t|

	Parameters: ~
	    • {win} (integer): The window number

	Returns: ~
	    (`dropbar_menu_t`?): The drop-down menu associated with the given
				 window

api.get_current_dropbar_menu()        *dropbar-api-get_current_dropbar_menu()*

	Get the drop-down menu associated with the current window

	Returns: ~
	    (`dropbar_menu_t`?): The drop-down menu associated with the
				 current window

api.goto_context_start([{count}])           *dropbar-api-goto_context_start()*

	Move the cursor to the start of the current context

	If {count} is 0 or `nil`, go to the start of current context, or the
	start at previous context if cursor is already at the start of current
	context

	If {count} is positive, goto the start of {count} previous context

	Parameters: ~
	    • {count} (integer?): The number of context to go back

api.select_next_context()                  *dropbar-api-select_next_context()*

	Open the next context in the drop-down menu

api.pick([{idx}])                                         *dropbar-api-pick()*

	Pick a component from current winbar

	If {idx} is `nil`, enter interactive pick mode to select a component

        If {idx} is a number, directly pick the component at that index if it
	exists

    	Parameters: ~
	    • {idx} (integer?): The index of the component to pick

------------------------------------------------------------------------------
HIGHLIGHTING                              *dropbar-configuration-highlighting*

`dropbar.nvim` defines the following highlight groups that, override them in
your colorscheme to change the appearance of the drop-down menu, the names
should be self-explanatory:

Highlight groups ~

  Highlight group                    Attributes

  DropBarIconKindArray               `{ link = 'Array' }`
  DropBarIconKindBoolean             `{ link = 'Boolean' }`
  DropBarIconKindBreakStatement      `{ link = 'Error' }`
  DropBarIconKindCall                `{ link = 'Function' }`
  DropBarIconKindCaseStatement       `{ link = 'Conditional' }`
  DropBarIconKindClass               `{ link = 'CmpItemKindClass' }`
  DropBarIconKindConstant            `{ link = 'Constant' }`
  DropBarIconKindConstructor         `{ link = 'CmpItemKindConstructor' }`
  DropBarIconKindContinueStatement   `{ link = 'Repeat' }`
  DropBarIconKindDeclaration         `{ link = 'CmpItemKindSnippet' }`
  DropBarIconKindDelete              `{ link = 'Error' }`
  DropBarIconKindDoStatement         `{ link = 'Repeat' }`
  DropBarIconKindElseStatement       `{ link = 'Conditional' }`
  DropBarIconKindEnum                `{ link = 'CmpItemKindEnum' }`
  DropBarIconKindEnumMember          `{ link = 'CmpItemKindEnumMember' }`
  DropBarIconKindEvent               `{ link = 'CmpItemKindEvent' }`
  DropBarIconKindField               `{ link = 'CmpItemKindField' }`
  DropBarIconKindFile                `{ link = 'NormalFloat' }`
  DropBarIconKindFolder              `{ link = 'Directory' }`
  DropBarIconKindForStatement        `{ link = 'Repeat' }`
  DropBarIconKindFunction            `{ link = 'Function' }`
  DropBarIconKindIdentifier          `{ link = 'CmpItemKindVariable' }`
  DropBarIconKindIfStatement         `{ link = 'Conditional' }`
  DropBarIconKindInterface           `{ link = 'CmpItemKindInterface' }`
  DropBarIconKindKeyword             `{ link = 'Keyword' }`
  DropBarIconKindList                `{ link = 'SpecialChar' }`
  DropBarIconKindMacro               `{ link = 'Macro' }`
  DropBarIconKindMarkdownH1          `{ link = 'markdownH1' }`
  DropBarIconKindMarkdownH2          `{ link = 'markdownH2' }`
  DropBarIconKindMarkdownH3          `{ link = 'markdownH3' }`
  DropBarIconKindMarkdownH4          `{ link = 'markdownH4' }`
  DropBarIconKindMarkdownH5          `{ link = 'markdownH5' }`
  DropBarIconKindMarkdownH6          `{ link = 'markdownH6' }`
  DropBarIconKindMethod              `{ link = 'CmpItemKindMethod' }`
  DropBarIconKindModule              `{ link = 'CmpItemKindModule' }`
  DropBarIconKindNamespace           `{ link = 'NameSpace' }`
  DropBarIconKindNull                `{ link = 'Constant' }`
  DropBarIconKindNumber              `{ link = 'Number' }`
  DropBarIconKindObject              `{ link = 'Statement' }`
  DropBarIconKindOperator            `{ link = 'Operator' }`
  DropBarIconKindPackage             `{ link = 'CmpItemKindModule' }`
  DropBarIconKindProperty            `{ link = 'CmpItemKindProperty' }`
  DropBarIconKindReference           `{ link = 'CmpItemKindReference' }`
  DropBarIconKindRepeat              `{ link = 'Repeat' }`
  DropBarIconKindScope               `{ link = 'NameSpace' }`
  DropBarIconKindSpecifier           `{ link = 'Specifier' }`
  DropBarIconKindStatement           `{ link = 'Statement' }`
  DropBarIconKindString              `{ link = 'String' }`
  DropBarIconKindStruct              `{ link = 'CmpItemKindStruct' }`
  DropBarIconKindSwitchStatement     `{ link = 'Conditional' }`
  DropBarIconKindType                `{ link = 'CmpItemKindClass' }`
  DropBarIconKindTypeParameter       `{ link = 'CmpItemKindTypeParameter' }`
  DropBarIconKindUnit                `{ link = 'CmpItemKindUnit' }`
  DropBarIconKindValue               `{ link = 'Number' }`
  DropBarIconKindVariable            `{ link = 'CmpItemKindVariable' }`
  DropBarIconKindWhileStatement      `{ link = 'Repeat' }`
  DropBarIconUIIndicator             `{ link = 'SpecialChar' }`
  DropBarIconUIPickPivot             `{ link = 'Error' }`
  DropBarIconUISeparator             `{ link = 'SpecialChar' }`
  DropBarIconUISeparatorMenu         `{ link = 'DropBarIconUISeparator' }`
  DropBarMenuCurrentContext          `{ link = 'PmenuSel' }`
  DropBarMenuNormalFloat             `{ link = 'WinBar' }`
  DropBarKindArray                   undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindBoolean                 undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindBreakStatement          undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindCall                    undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindCaseStatement           undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindClass                   undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindConstant                undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindConstructor             undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindContinueStatement       undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindDeclaration             undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindDelete                  undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindDoStatement             undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindElseStatement           undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindEnum                    undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindEnumMember              undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindEvent                   undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindField                   undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindFile                    undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindFolder                  undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindForStatement            undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindFunction                undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindIdentifier              undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindIfStatement             undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindInterface               undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindKeyword                 undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindList                    undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindMacro                   undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindMarkdownH1              undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindMarkdownH2              undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindMarkdownH3              undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindMarkdownH4              undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindMarkdownH5              undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindMarkdownH6              undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindMethod                  undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindModule                  undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindNamespace               undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindNull                    undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindNumber                  undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindObject                  undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindOperator                undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindPackage                 undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindProperty                undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindReference               undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindRepeat                  undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindScope                   undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindSpecifier               undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindStatement               undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindString                  undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindStruct                  undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindSwitchStatement         undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindType                    undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindTypeParameter           undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindUnit                    undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindValue                   undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindVariable                undefined, follows `hl-WinBar` and `hl-WinBarNC`
  DropBarKindWhileStatement          undefined, follows `hl-WinBar` and `hl-WinBarNC`


==============================================================================
DEVELOPERS                                                *dropbar-developers*

------------------------------------------------------------------------------
ARCHITECTURE                                 *dropbar-developers-architecture*

The flow chart below should well illustrate what does `dropbar` do user moves
around in their window or clicks at a symbol in the winbar:

>
                                        ┌──────────────────┐
                                        │winbar at win 1000│ {k}th symbol clicked
                                        │ contaning buf 1  ├──────────────────────┐
                                        └───────┬─▲────────┘                      │
                                                ▼ │                               │
                                    _G.dropbar.get_dropbar_str()                  │
                                                │ ▲                               │
    ┌──────────────┐                     ┌──────▼─┴──────┐                        │
    │sources       │                     │_G.dropbar.bars│                        │
    │ ┌───┐        │                     └──────┬─▲──────┘                        │
    │ │lsp│        │                 ┌───────┬──▼─┴──┬───────┐                    │
    │ └───┘        │               ┌─▼─┐   ┌─┴─┐   ┌─┴─┐    ...                   │
    │ ┌──────────┐ │               │[1]│   │[2]│   │[3]│                          │
    │ │treesitter│ │               └─┬─┘   └─┬─┘   └─┬─┘                          │
    │ └──────────┘ │                 │      ...     ...                           │
    │  ...         │                 └──┬─▲─────────────┬──────┐                  │
    └─────┬─▲──────┘                  ┌─▼─┴──┐       ┌──┴───┐ ...                 │
          │ │                         │[1000]│       │[1015]│                     │
          │ │                         └─┬─▲──┘       └──────┘                     │
          │ │              __tostring() │ │ return string cache                   │
          │ │                       ┌───▼─┴───┐                    ┌──────────────▼──────────────┐
          │ │                       │dropbar_t├────────────────────▶_G.dropbar.on_click_callbacks│
          │ │    On update events   └───┬─▲───┘  register symbol   └──────────────┬──────────────┘
          │ │ get_symbols(1, <cursor>)  │ │    on_click() callbacks               │
          │ └───────────────────────────┘ │                       ┌──────────┬────▼─────┬─────────┐
          └───────────────────────────────┘                   ┌───▼────┐ ┌───┴────┐ ┌───┴────┐   ...
      each source returns dropbar_symbol_t[]                  │['buf1']│ │['buf2']│ │['buf3']│
     dropbar_t adds symbols as its components                 └───┬────┘ └───┬────┘ └───┬────┘
          dropbar_t flushes string cache                          │         ...        ...
                                                                  └────────┬───────────────┬─────────┐
                                                                     ┌─────▼─────┐   ┌─────┴─────┐  ...
                                                                     │['win1000']│   │['win1015']│
                                                                     └─────┬─────┘   └─────┬─────┘
                                                                           │              ...
                                                            ┌─────────┬────▼────┬─────────┐
                                                        ┌───┴───┐    ...   ┌────┴────┐   ...
                                                        │['fn1']│          │['fn{k}']│
                                                        └───────┘          └────┬────┘
                                                                                ▼
                                                invoke _G.dropbar.bars[1][1000].components[k]:on_click()
                                                                                │
                                                                                ▼
                                                               open drop-down menu, goto symbol, etc
<

------------------------------------------------------------------------------
CLASSES                                           *dropbar-developers-classes*

..............................................................................
DROPBAR_T                               *dropbar-developers-classes-dropbar_t*
								   *dropbar_t*

Declared and defined in `lua/dropbar/bar.lua`.

`dropbar_t` is a class that represents a winbar.

It gets symbols (|dropbar-developers-classes-dropbar_symbol_t|) from sources
(|dropbar-developers-classes-dropbar_source_t|) and renders them to a string.
It is also responsible for registering `on_click` callbacks of each symbol in
the global table `_G.dropbar.on_click_callbacks` so that nvim knows which
function to call when a symbol is clicked.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

`dropbar_t` has the following fields:

dropbar_t.buf                                                  *dropbar_t.buf*

	The buffer the dropbar is attached to

	Type ~
	    integer

dropbar_t.win                                                  *dropbar_t.win*

	The window the dropbar is attached to

	Type ~
	    integer

dropbar_t.sources                                          *dropbar_t.sources*

 	Sourcess that provide symbols to the dropbar

	Type ~
	    `dropbar_source_t`[]

dropbar_t.separator                                      *dropbar_t.separator*

 	Seprarator between symbols provided by sources

	Type ~
	    `dropbar_symbol_t`

dropbar_t.padding                                          *dropbar_t.padding*

 	Padding to use between the winbar and the window border

	Type ~
	    { left: integer, right: integer }

dropbar_t.extends                                          *dropbar_t.extends*

 	Symbol to use at the end of a symbol when it is truncated

	Type ~
	    `dropbar_symbol_t`

dropbar_t.components                                    *dropbar_t.components*

 	Symbols got from sources

	Type ~
	    `dropbar_symbol_t`[]

dropbar_t.string_cache                                *dropbar_t.string_cache*

 	String cache of the dropbar

	Type ~
	    string

dropbar_t.in_pick_mode                                *dropbar_t.in_pick_mode*

 	Whether the dropbar is in pick mode

	Type ~
	    boolean?

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

`dropbar_t` has the following methods:

dropbar_t:new([{opts}])                                      *dropbar_t:new()*

 	Constructs a new dropbar

	Parameters ~
	    opts: `dropbar_opts_t`? `dropbar_symbol_t` with reduces fields

	Returns ~
	    `dropbar_t`

dropbar_t:del()                                              *dropbar_t:del()*

 	Destructs the dropbar

dropbar_t:displaywidth()                            *dropbar_t:displaywidth()*

 	Returns the display width of the dropbar

	Returns ~
	    The display width of the dropbar

dropbar_t:truncate()                                    *dropbar_t:truncate()*

 	Truncates the dropbar if it exceeds the window width

	*Side effect* ~
	    Changes `dropbar_t.components`

dropbar_t:cat([{plain}])                                     *dropbar_t:cat()*

	Concatenates the dropbar components into a string with substrings for
	highlights and click support if `plain` is not set; else returns a
	plain string without substrings for highlights and click support

	Parameters ~
	    • {plain} (boolean?): Whether to return a plain string without
				  substrings for highlights and click support

	Returns ~
	    (string) The string representation of the dropbar

dropbar_t:redraw()                                        *dropbar_t:redraw()*

 	Redraws the dropbar

dropbar_t:update()                                        *dropbar_t:update()*

 	Updates dropbar components (`dropbar_t.components`) and redraws the
	dropbar afterwards

dropbar_t:pick_mode_wrap({fn})                    *dropbar_t:pick_mode_wrap()*

 	Executes {fn} in pick mode

	Parameters ~
	    • {fn} (fun(): T?): Function to execute in pick mode

 	Returns ~
	    (T?) The return value of {fn}

dropbar_t:pick([{idx}])                                     *dropbar_t:pick()*

 	Picks a component from the dropbar in interactive pick mode if {idx}
	is not given; else picks the {idx}th component directly

	Parameters ~
	    • {idx} (integer?): The index of the component to pick

dropbar_t:__tostring()                                *dropbar_t:__tostring()*

 	Meta method to convert dropbar_t to its string representation

..............................................................................
DROPBAR_SYMBOL_T                 *dropbar-developers-classes-dropbar_symbol_t*
							    *dropbar_symbol_t*

Declared and defined in `lua/dropbar/bar.lua`.

`dropbar_symbol_t` is a class that represents a symbol in a dropbar. It is the
basic element of `dropbar_t` and `dropbar_menu_entry_t`, see
|dropbar-developers-classes-dropbar_t| and
|dropbar-developers-classes-dropbar_menu_entry_t| for more information.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

`dropbar_symbol_t` has the following fields:

dropbar_symbol_t.name                                  *dropbar_symbol_t.name*

 	Name of the symbol

	Type ~
	    string

dropbar_symbol_t.icon                                  *dropbar_symbol_t.icon*

 	Icon of the symbol

	Type ~
	    string

dropbar_symbol_t.name_hl                            *dropbar_symbol_t.name_hl*

 	Highlight group of the name of the symbol

	Type ~
	    string?

dropbar_symbol_t.icon_hl                            *dropbar_symbol_t.icon_hl*

 	Highlight group of the icon of the symbol

	Type ~
	    string?

dropbar_symbol_t.bar                                    *dropbar_symbol_t.bar*

 	The dropbar the symbol belongs to, if the symbol is shown inside a
	winabr

	Type ~
	    `dropbar_t`?

dropbar_symbol_t.menu                                  *dropbar_symbol_t.menu*

 	The menu associated with the symbol, if the symbol is shown inside a
	winbar

	Type ~
	    `dropbar_menu_t`?

dropbar_symbol_t.entry                                *dropbar_symbol_t.entry*

 	The menu entry the symbol belongs to, if the symbol is shown inside a
	menu

	Type ~
	    `dropbar_menu_entry_t`?

dropbar_symbol_t.children                         *dropbar_symbol_t.children*

 	Children of the symbol

	For example, the children of a directory symbol are the files and
	directories inside the directory; the children of a function symbol
        can be the arguments of the function or the local variables inside the
        function

  Type ~
      `dropbar_symbol_t`[]?

dropbar_symbol_t.siblings                         *dropbar_symbol_t.siblings*

 	Siblings of the symbol

	For example, the siblings of a directory symbol are the files and
	directories in the same directory; the siblings of a level 4 markdown
	heading symbol can be some other level 4 markdown heading symbols

  Type ~
      `dropbar_symbol_t`[]?

dropbar_symbol_t.bar_idx                            *dropbar_symbol_t.bar_idx*

 	Index of the symbol in the winbar

	Type ~
	    integer?

dropbar_symbol_t.entry_idx                        *dropbar_symbol_t.entry_idx*

 	Index of the symbol in the menu entry

	Type ~
	    integer?

dropbar_symbol_t.sibling_idx                    *dropbar_symbol_t.sibling_idx*

 	Index of the symbol in the siblings

  Type ~
      integer?

dropbar_symbol_t.on_click                          *dropbar_symbol_t.on_click*

 	Callback to invoke when the symbol is clicked

	Type ~
	    `fun(this: dropbar_symbol_t, min_width: integer?, n_clicks: integer?, button: string?, modifiers: string?)|false?`

	    Parameters ~
		• this (`dropbar_symbol_t`): The dropbar symbol itself
		• min_width (integer?): The minimum width of the dropbar
		• n_clicks (integer?): The number of clicks
		• button (string?): The mouse button that was clicked
		• modifiers (string?): The modifiers that were pressed

		For more information about the parameters, see the description
		about the execute function label in the help page for
		'statusline'.

dropbar_symbol_t.actions                            *dropbar_symbol_t.actions*

 	Common actions of a symbol (e.g. select, preview, jump, etc)

  Type ~
	table<string, fun(this: dropbar_symbol_t)>?

dropbar_symbol_t.data                                  *dropbar_symbol_t.data*

 	Any extra data associated with the symbol

	Type ~
	    table?

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

`dropbar_symbol_t` has the following methods:

dropbar_symbol_t:new([{opts}])                        *dropbar_symbol_t:new()*

 	Constructor of `dropbar_symbol_t`

	Parameters ~
	    • {opts} (`dropbar_symbol_t`?): The options to create the
					    `dropbar_symbol_t` with

 	Returns ~
	    (`dropbar_symbol_t`) The newly created `dropbar_symbol_t`

dropbar_symbol_t:del()                                *dropbar_symbol_t:del()*

 	Destructor of `dropbar_symbol_t`

dropbar_symbol_t:merge({opts})                      *dropbar_symbol_t:merge()*

	Create a new `dropbar_symbol_t` by merging `opts` into the current
	`dropbar_symbol_t`

  Parameters ~
      • {opts} (`dropbar_symbol_t`): The options to merge into the
				      `dropbar_symbol_t`

dropbar_symbol_t:cat([{plain}])                       *dropbar_symbol_t:cat()*

 	Concatenates the symbol into a string with substrings for highlights
	and click support if `plain` is not set; else returns a plain string
	without substrings for highlights and click support

	Parameters ~
	    • {plain} (boolean?): Whether to return a plain string without
				   substrings for highlights and click support

 	Returns ~
	    (string) The concatenated string

dropbar_symbol_t:displaywidth()              *dropbar_symbol_t:displaywidth()*

 	Returns the display width of the symbol

	Returns ~
	    (integer) The display width of the symbol

dropbar_symbol_t:bytewidth()                    *dropbar_symbol_t:bytewidth()*

 	Returns the byte width of the symbol

	Returns ~
	    (integer) The byte width of the symbol

dropbar_symbol_t:goto_range_start()      *dropbar_symbol_t:goto_range_start()*

 	Moves the cursor to the start of the range of the dropbar symbol

					       *dropbar_symbol_t:swap_field()*
dropbar_symbol_t:swap_field({field}, {new_val})

 	Temporarily change the content of a dropbar symbol
	Currently does not support replacing `nil` values

	Parameters ~
	    • {field} (string): The field to change
	    • {new_val} (any): The new value of the field

dropbar_symbol_t:restore()                        *dropbar_symbol_t:restore()*

 	Restore the content of a dropbar symbol after
	`dropbar_symbol_t:swap_field()` is called
	Currently does not support restoring `nil` values

..............................................................................
DROPBAR_MENU_T                     *dropbar-developers-classes-dropbar_menu_t*
							      *dropbar_menu_t*

Declared and defined in `lua/dropbar/menu.lua`.

`dropbar_menu_t` is a class that represents a drop-down menu.

`dropbar_menu_t` has the following fields:

dropbar_menu_t.buf                                        *dropbar_menu_t.buf*

 	Buffer of the menu

	Type ~
	    integer

dropbar_menu_t.win                                        *dropbar_menu_t.win*

 	Window of the menu

	Type ~
	    integer

dropbar_menu_t.is_opened                            *dropbar_menu_t.is_opened*

 	Whether the menu is currently opened

	Type ~
	    boolean?

dropbar_menu_t.entries                                *dropbar_menu_t.entries*

 	Entries in the menu

	Type ~
	    `dropbar_menu_entry_t`[]

dropbar_menu_t.win_configs                        *dropbar_menu_t.win_configs*

	Window configuration, values in this table can be functions, see
	|dropbar-configuration-options-menu|

	Type ~
	    table

dropbar_menu_t._win_configs                      *dropbar_menu_t._win_configs*

 	Evaluated window configuration

	Type ~
	    table?

dropbar_menu_t.cursor                                  *dropbar_menu_t.cursor*

 	Initial cursor position

	Type ~
	    integer[]?

dropbar_menu_t.prev_win                              *dropbar_menu_t.prev_win*

 	Previous window, assigned when calling `dropbar_menu_t:new()` or
	automatically determined in `dropbar_menu_t:open()`

	Type ~
	    integer?

dropbar_menu_t.sub_menu                              *dropbar_menu_t.sub_menu*

 	Submenu, assigned when calling `dropbar_menu_t:new()` or automatically
	determined when a new menu opens

	Type ~
	    `dropbar_menu_t`?

dropbar_menu_t.parent_menu                        *dropbar_menu_t.parent_menu*

	Parent menu, assigned when calling `dropbar_menu_t:new()` or
	automatically determined in `dropbar_menu_t:open()`

	Type ~
	    `dropbar_menu_t`?

dropbar_menu_t.clicked_at                          *dropbar_menu_t.clicked_at*

 	Last position where the menu was clicked

	Type ~
	    integer[]?

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

`dropbar_menu_t` has the following methods:

dropbar_menu_t:new({opts})                              *dropbar_menu_t:new()*

 	Constructor of `dropbar_menu_t`

	Parameters ~
	    • {opts} (`dropbar_menu_t`): options for the menu

	Returns ~
	    (`dropbar_menu_t`): the new menu

dropbar_menu_t:del()                                    *dropbar_menu_t:del()*

 	Destructor of `dropbar_menu_t`

dropbar_menu_t:eval_win_config()            *dropbar_menu_t:eval_win_config()*

 	Evaluate window configuration and store the result in `_win_configs`

dropbar_menu_t:get_component_at({pos})     *dropbar_menu_t:get_component_at()*

 	Get the component at position `pos`

	Parameters ~
	    • {pos} (integer[]): position

	Returns ~
	    (`dropbar_symbol_t`): the component at `pos`

						   *dropbar_menu_t:click_at()*
dropbar_menu_t:click_at({pos}, {min_width}, {n_clicks}, {button}, {modifiers})

 	Simulate a click at position `pos` in the menu

	Parameters ~
	    • {pos} (integer[]): position
	    • {min_width} (integer?): minimum width of the menu
	    • {n_clicks} (integer?): number of clicks
	    • {button} (string?): mouse button
	    • {modifiers} (string?): modifiers

						   *dropbar_menu_t:click_on()*
dropbar_menu_t:click_on({symbol}, {min_width}, {n_clicks}, {button}, {modifiers})

 	Simulate a click at the component `symbol` of the menu

	Parameters ~
	    • {symbol} (`dropbar_symbol_t`): component symbol
	    • {min_width} (integer?): minimum width of the menu
	    • {n_clicks} (integer?): number of clicks
	    • {button} (string?): mouse button
	    • {modifiers} (string?): modifiers

					      *dropbar_menu_t:hl_line_range()*
dropbar_menu_t:hl_line_range({line}, {hl_info})

	Add highlight to a range in the menu buffer according to the line
	number and the highlight info
	|dropbar-developers-classes-dropbar_menu_hl_info_t|

	Parameters ~
	    • {line} (integer): line number
	    • {hl_info} (`dropbar_menu_hl_info_t`): highlight info

					     *dropbar_menu_t:hl_line_single()*
dropbar_menu_t:hl_line_single({line}[, {hlgroup}])

	Add highlight to a single line in the menu buffer

	{hlgroup} defaults to 'DropBarMenuCurrentContext'

	Notice that all other highlights added by this functions before will
	be cleared when this function is called

	Parameters ~
	    • {line} (integer): line number
	    • {hlgroup} (string?): highlight group

dropbar_menu_t:make_buf()                          *dropbar_menu_t:make_buf()*

 	Create the menu buffer from the entries
	|dropbar-developers-classes-dropbar_menu_entry_t|

dropbar_menu_t:open()                                  *dropbar_menu_t:open()*

 	Open the menu

dropbar_menu_t:close()                                *dropbar_menu_t:close()*

 	Close the menu

dropbar_menu_t:toggle()                              *dropbar_menu_t:toggle()*

 	Toggle the menu

..............................................................................
DROPBAR_MENU_ENTRY_T         *dropbar-developers-classes-dropbar_menu_entry_t*
							*dropbar_menu_entry_t*

Declared and defined in `lua/dropbar/menu.lua`.

`dropbar_menu_entry_t` is a class that represents an entry (row) in a
drop-down menu. A `dropbar_menu_t` instance is made up of multiple
`dropbar_menu_entry_t` instances while a `dropbar_menu_entry_t` instance can
contain multiple `dropbar_symbol_t` instances.

`dropbar_menu_entry_t` has the following fields:

dropbar_menu_t.separator                            *dropbar_menu_t.separator*

 	Separator to use in the entry

	Type ~
	    `dropbar_symbol_t`

dropbar_menu_t.padding                                *dropbar_menu_t.padding*

 	Padding to use between the menu entry and the menu border

	Type ~
	    { left: integer, right: integer }

dropbar_menu_t.components                          *dropbar_menu_t.components*

	Symbols got from sources |dropbar-developers-classes-dropbar_source_t|
	in the entry

	Type ~
	    `dropbar_symbol_t`[]

dropbar_menu_t.menu                                      *dropbar_menu_t.menu*

 	The menu the entry belongs to

	Type ~
	    `dropbar_menu_t`?

dropbar_menu_t.idx                                        *dropbar_menu_t.idx*

 	The index of the entry in the menu

	Type ~
	    integer?

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

`dropbar_menu_entry_t` has the following methods:

dropbar_menu_entry_t:new([{opts}])                *dropbar_menu_entry_t:new()*

 	Constructor of `dropbar_menu_entry_t`

	Parameters ~
	    • {opts} (`dropbar_menu_entry_t`?): options for the entry

	Returns ~
	    (`dropbar_menu_entry_t`): the new entry

dropbar_menu_entry_t:del()                        *dropbar_menu_entry_t:del()*

 	Destructor of `dropbar_menu_entry_t`

dropbar_menu_entry_t:cat()                        *dropbar_menu_entry_t:cat()*

 	Concatenate the components into a string, returns the string and
	highlight info |dropbar-developers-classes-dropbar_menu_hl_info_t|

	Returns ~
	    (string, `dropbar_menu_hl_info_t`): the string and highlight info

dropbar_menu_entry_t:displaywidth()      *dropbar_menu_entry_t:displaywidth()*

	Calculate the display width of the entry

	Returns ~
	    (integer): the display width of the entry

dropbar_menu_entry_t:bytewidth()            *dropbar_menu_entry_t:bytewidth()*

	Calculate the byte width of the entry

	Returns ~
	    (integer): the byte width of the entry

				      *dropbar_menu_entry_t:first_clickable()*
dropbar_menu_entry_t:first_clickable([{offset}])

	Get the first clickable component
        |dropbar-developers-classes-dropbar_symbol_t| in the dropbar menu
	entry starting from {offset}, which defaults to 0

	Parameters ~
	    • {offset} (integer?): offset to start from, defaults to 0

	Returns ~
	    (`dropbar_symbol_t`?): the first clickable component

..............................................................................
DROPBAR_MENU_HL_INFO_T     *dropbar-developers-classes-dropbar_menu_hl_info_t*
						      *dropbar_menu_hl_info_t*

Declared and defined in `lua/dropbar/menu.lua`.

`dropbar_menu_hl_info_t` is a class that represents a highlight range in a
single line of a drop-down menu.

`dropbar_menu_hl_info_t` has the following fields:

dropbar_menu_t.start                                    *dropbar_menu_t.start*

 	The start column of the highlight range

	Type ~
	    integer

dropbar_menu_t.end                                        *dropbar_menu_t.end*

 	The end column of the highlight range

	Type ~
	    integer

dropbar_menu_t.hlgroup                                *dropbar_menu_t.hlgroup*

 	The highlight group to use for the range

	Type ~
	    string

dropbar_menu_t.ns                                          *dropbar_menu_t.ns*

 	The namespace to use for the range, nil if using default namespace

	Type ~
	    integer?

..............................................................................
DROPBAR_SOURCE_T                                            *dropbar_source_t*

Declared in `lua/dropbar/sources/init.lua`.

`dropbar_source_t` is a class that represents a source of a drop-down menu.

`dropbar_source_t` has the following field:

						*dropbar_source_t.get_symbols*
dropbar_source_t.get_symbols({buf}, {cursor})

 	Get the symbols to show in the winbar given buffer number {buf} and
	cursor position {cursor}

	Parameters ~
	    • {buf} (integer): buffer number
	    • {cursor} (integer[]): cursor position

	Returns ~
	    (`dropbar_symbol_t`[]): the symbols to show in the winbar

------------------------------------------------------------------------------
MAKING A NEW SOURCE                       *dropbar-developers-making-a-source*

A `dropbar_source_t` instance is just a table with `get_symbols` field set to
a function that returns an array of `dropbar_symbol_t` instances given a
buffer number and a cursor position.

We have seen a simple example of a custom source in
|dropbar-configuration-options-bar| where the second source is set to a
table with its field `get_symbols` set to a function tht gets symbols from
either the markdown, LSP, or treesitter sources to achieve fall-back behavior.

Here is another example of a custom source that will always return two symbols
saying "Hello" and "dropbar" with highlights `'hl-Keyword'` and `'hl-Title'`
and a smiling face shown in `'hl-WarningMsg'` the start of the first symbol;
clicking on the first symbol will show a notification message saying "Have you
smiled today?", followed by the smiling face icon used in the in dropbar
symbol: >lua

    local bar = require('dropbar.bar')
    local custom_source = {
      get_symbols = function(_, _)
        return {
          bar.dropbar_symbol_t:new({
            icon = ' ',
            icon_hl = 'WarningMsg',
            name = 'Hello',
            name_hl = 'Keyword',
            on_click = function(self)
              vim.notify('Have you smiled today? ' .. self.icon)
            end,
          }),
          bar.dropbar_symbol_t:new({
            name = 'dropbar',
            name_hl = 'Title',
          }),
        }
      end,
    }
<

Add this source to |dropbar-configuration-options-bar| table to see it in
action: >lua

    require('dropbar').setup({
      bar = {
        sources = {
          custom_source,
        },
      },
    })
<

..............................................................................
MAKING A SOURCE WITH DROP-DOWN MENUS
*dropbar-developers-making-a-source-with-drop-down-menus*


The following example shows how to make a source that returns two symbols with
the first symbol having a drop-down menu with a single entry saying 'World':
>lua
    local bar = require('dropbar.bar')
    local menu = require('dropbar.menu')
    local custom_source = {
      get_symbols = function(_, _)
	return {
	  bar.dropbar_symbol_t:new({
	    icon = ' ',
	    icon_hl = 'WarningMsg',
	    name = 'Hello',
	    name_hl = 'Keyword',
	    on_click = function(self)
	      self.menu = menu.dropbar_menu_t:new({
		entries = {
		  menu.dropbar_menu_entry_t:new({
		    components = {
		      bar.dropbar_symbol_t:new({
			icon = ' ',
			icon_hl = 'WarningMsg',
			name = 'World',
			name_hl = 'Keyword',
			on_click = function(sym)
			  vim.notify('Have you smiled today? ' .. sym.icon)
			end,
		      }),
		    },
		  }),
		},
	      })
	      self.menu:toggle()
	    end,
	  }),
	  bar.dropbar_symbol_t:new({
	    name = 'dropbar',
	    icon = ' ',
	    name_hl = 'Special',
	    icon_hl = 'Error',
	  }),
	}
      end,
    }
<

..............................................................................
DEFAULT ON_CLICK() CALLBACK     *dropbar-developers-default-on_click-callback*

`dropbar_symbol_t:new()` defines a default `on_click()` callback if non is
provided.

The default `on_click()` callback will look for these fields in the symbol
instance and create a drop-down menu accordingly on click, for more
information about these fields, see
|dropbar-developers-classes-dropbar_symbol_t|:

    • `dropbar_symbol_t.siblings`

	Array of symbols to show in the first drop-down menu (the menu opened
	by clicking the symbol in the winbar)

    • `dropbar_symbol_t.sibling_idx`

	Index of the symbol in `dropbar_symbol_t.siblings`, used to determine
	the initial position of the cursor in the first drop-down menu

    • `dropbar_symbol_t.children`

	Array of symbols to show in the sub-menus of the corresponding symbol
	(the menus opened by clicking a symbol inside another menu)

    • `dropbar_symbol_t.actions.jump`

	Jump to the start of the symbol, it will be called when clicking on
	the corresponding symbol (not the indicator) inside a menu

The following example shows a source that utilizes the default `on_click()`
callback: >lua

    local bar = require('dropbar.bar')
    local custom_source = {
      get_symbols = function(_, _)
	return {
	  bar.dropbar_symbol_t:new({
	    name = 'Lev 1',
	    name_hl = 'Keyword',
	    siblings = {
	      bar.dropbar_symbol_t:new({
		name = 'Lev 1.1',
		name_hl = 'WarningMsg',
	      }),
	      bar.dropbar_symbol_t:new({
		name = 'Lev 1.2',
		name_hl = 'Error',
	      }),
	      bar.dropbar_symbol_t:new({
		name = 'Lev 1.3',
		name_hl = 'String',
		children = {
		  bar.dropbar_symbol_t:new({
		    name = 'Lev 1.3.1',
		    name_hl = 'String',
		    actions = {
		      jump = function(_)
			vim.notify('Jumping to Lev 1.3.1')
		      end
		    }
		  }),
		},
	      }),
	    },
	  }),
	}
      end,
    }
<

..............................................................................
LAZY-LOADING EXPENSIVE FIELDS
*dropbar-developers-lazy-loading-expensive-fields*

If the symbol fields `siblings` or `children` are expensive to compute, you
can use meta-tables to lazy-load them, so that they are only computed when a
menu is opened: >lua

    local bar = require('dropbar.bar')
    local custom_source = {
      get_symbols = function(_, _)
	return {
	  bar.dropbar_symbol_t:new(setmetatable({
	    name = 'Lev 1',
	    name_hl = 'Keyword',
	  }, {
	    __index = function(self, key)
	      if key == 'siblings' then
		self[siblings] = -- [[ compute siblings ]]
		return self[siblings]
	      end
	      if key == 'children' then
		self[children] = -- [[ compute children ]]
		return self[children]
	      end
	      -- ...
	    end,
	  })),
	}
      end,
    }
<

To see concrete examples of lazy-loading, see `lua/dropbar/sources`.

==============================================================================
SIMILAR PROJECTS                                    *dropbar-similar-projects*

- nvim-navic <https://github.com/SmiteshP/nvim-navic>


------------------------------------------------------------------------------
vim:tw=78:ts=8:noet:ft=help:norl:
